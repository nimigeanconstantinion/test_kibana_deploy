version: '3.8'

networks:
  myappnetwork:
    driver: bridge

volumes:
  volume_data_test:
    driver: local
  kibana_data_test:
  es_data_test:
  logstash_pipeline:
  prometheus_data_test:
  grafana_data_test:
  grafana_provisioning_test:
    driver: local

x-variables:
  elastic_password: &elastic_password 'passwOrd'
  kibana_password: &kibana_password 'passwOrd'

services:
  mysql:
    container_name: mysql-container
    image: mysql:5.7
    volumes:
      - volume_data_test:/var/lib/mysql
      - ./my.cnf:/etc/mysql/my.cnf
    environment:
      MYSQL_DATABASE: cats_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    networks:
      - myappnetwork
    restart: always

  service:
    container_name: service-container
    image: "ion21/test-kibana:v6"
    ports:
      - "3100:3100"
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mysql
    networks:
      - myappnetwork

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - myappnetwork
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      ELASTIC_PASSWORD: *elastic_password
      discovery.type: 'single-node'
      cluster.name: 'elasticsearch'
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms1g -Xmx1g'
      xpack.security.enabled: 'true'
      xpack.security.http.ssl.enabled: 'false'
    networks:
      - myappnetwork
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - es_data_test:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
      ELASTICSEARCH_USERNAME: 'kibana_system'
      ELASTICSEARCH_PASSWORD: *kibana_password
      TELEMETRY_ENABLED: 'false'
    networks:
      - myappnetwork
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
    volumes:
      - kibana_data_test:/usr/share/kibana/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash
    environment:
      ELASTIC_PASSWORD: *elastic_password
      CONFIG_STRING: |
        input {
          tcp {
            port => 3000
            codec => json_lines
          }
        }
        output {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            user => "elastic"
            password => "$${ELASTIC_PASSWORD}"
            ssl => false
          }
        }
    networks:
      - myappnetwork
    ports:
      - "3000:3000"
    depends_on:
      - elasticsearch

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: setup
    environment:
      ELASTIC_PASSWORD: *elastic_password
      KIBANA_PASSWORD: *kibana_password
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:$${ELASTIC_PASSWORD}" -H "Content-Type: application/json" \
          http://elasticsearch:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"$${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
    networks:
      - myappnetwork

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data_test:/prometheus
    environment:
      PROMETHEUS_CONFIG: |
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'spring-boot-apps'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets:
                  - 'service:3100'
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "$${PROMETHEUS_CONFIG}" > /etc/prometheus/prometheus.yml
        /bin/prometheus --config.file=/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    depends_on:
      - service
    networks:
      - myappnetwork

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3200:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    depends_on:
      - prometheus
    networks:
      - myappnetwork
    volumes:
      - grafana_data_test:/var/lib/grafana
      - grafana_provisioning_test:/etc/grafana/provisioning
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        mkdir -p /etc/grafana/provisioning/dashboards
        echo '
        apiVersion: 1

        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            isDefault: true
            url: http://prometheus:9090
            version: 1
            editable: false
        ' > /etc/grafana/provisioning/datasources/datasource.yml
        /run.sh